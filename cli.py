from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich.layout import Layout
from rich.live import Live
from rich.columns import Columns
from icecream import ic
from pathlib import Path
import subprocess
from typing import List, Dict, Any, Optional
from rich.box import SIMPLE

console = Console()

class CLI:
    def __init__(self, debug: bool = False):
        self.console = Console()
        self.debug = debug
        
    def log(self, message: str, data: Any = None, status: str = None):
        """
        Wy≈õwietla komunikat w konsoli
        
        Args:
            message: G≈Ç√≥wny komunikat
            data: Dodatkowe dane do wy≈õwietlenia
            status: Status komunikatu (error/success/warning)
        """
        if self.debug:
            ic(message, data)
            return
            
        # Okre≈õlenie stylu na podstawie statusu
        style = {
            "error": "bold red",
            "success": "bold green",
            "warning": "bold yellow"
        }.get(status, "")
        
        # Przygotowanie tekstu
        text = message
        if data:
            if isinstance(data, dict):
                text += "\n" + "\n".join(f"  {k}: {v}" for k, v in data.items())
            else:
                text += f": {data}"
                
        # Wy≈õwietlenie z odpowiednim formatowaniem
        if status:
            self.console.print(Panel(text, style=style))
        else:
            self.console.print(text)
            
    def show_header(self, text: str):
        self.console.print(Panel(text, style="bold blue"))
        
    def show_menu(self, ssh_connected: bool = False) -> str:
        choices = [
            ("1", "Pobierz pliki z serwera", True),
            ("2", "Wy≈õlij pliki na serwer", True),
            ("3", "Sprawd≈∫ r√≥≈ºnice", False),
            ("4", "Usu≈Ñ pliki z cache", False),
            ("5", "Usu≈Ñ pliki lokalne", False),
            ("6", "ZarzƒÖdzaj po≈ÇƒÖczeniem", False),
            ("7", "ZarzƒÖdzaj profilami", False),
            ("0", "Zako≈Ñcz", False)
        ]
        
        self.console.print("\nMenu g≈Ç√≥wne:")
        for num, text, requires_ssh in choices:
            if requires_ssh and not ssh_connected and not self.debug:
                self.console.print(f"[dim]{num}. {text} (wymaga po≈ÇƒÖczenia)[/dim]")
            else:
                self.console.print(f"{num}. {text}")
        
        return Prompt.ask("\nWybierz opcjƒô", choices=[c[0] for c in choices])
        
    def show_file_list(self, files: List[str], title: str):
        table = Table(title=title)
        table.add_column("≈öcie≈ºka pliku")
        for file in files:
            table.add_row(file)
        self.console.print(table)
        
    def show_diff_info(self, file: str, status: str, details: Optional[Dict] = None):
        icons = {
            "server": "üîÑ",
            "local": "üìù",
            "error": "‚ùå",
            "success": "‚úÖ"
        }
        
        text = f"{icons.get(status, '‚ùì')} {file}"
        if details:
            for key, value in details.items():
                text += f"\n  ‚îî‚îÄ {key}: {value}"
                
        style = "red" if status == "error" else "green" if status == "success" else "yellow"
        self.console.print(Panel(text, style=style)) 
        
    def show_file_comparison(self, cache_files: List[str], server_files: List[str], 
                            differences: Dict[str, str]):
        """Wy≈õwietla por√≥wnanie plik√≥w w dw√≥ch kolumnach"""
        layout = Layout()
        layout.split_row(
            Layout(name="cache", ratio=1),
            Layout(name="server", ratio=1)
        )
        
        # Tabela plik√≥w cache
        cache_table = Table(title="Pliki w cache", box=SIMPLE)
        cache_table.add_column("Status")
        cache_table.add_column("≈öcie≈ºka")
        
        # Tabela plik√≥w na serwerze
        server_table = Table(title="Pliki na serwerze", box=SIMPLE)
        server_table.add_column("Status")
        server_table.add_column("≈öcie≈ºka")
        
        # Wype≈Çnianie tabel - tylko pliki ze zmianami
        for file in sorted(differences.keys()):
            if file in cache_files:
                cache_table.add_row("‚ùå", file)
            if file in server_files:
                server_table.add_row("‚ùå", file)
        
        # Aktualizacja layoutu
        layout["cache"].update(Panel(cache_table))
        layout["server"].update(Panel(server_table))
        
        self.console.print(layout)
        
    def show_file_diff(self, file1: Path, file2: Path):
        """Pokazuje r√≥≈ºnice miƒôdzy plikami u≈ºywajƒÖc git diff"""
        try:
            # Najpierw spr√≥buj otworzyƒá w nowym oknie
            subprocess.Popen([
                "x-terminal-emulator", 
                "-e", 
                f"git diff --no-index --color {file1} {file2} | less -R"
            ])
        except Exception:
            # Je≈õli nie uda≈Ço siƒô otworzyƒá nowego okna, poka≈º w konsoli
            result = subprocess.run(
                ["git", "diff", "--no-index", "--color", str(file1), str(file2)],
                capture_output=True,
                text=True
            )
            self.console.print(result.stdout if result.returncode == 1 else "Brak r√≥≈ºnic") 
        
    def confirm(self, message: str) -> bool:
        """Wy≈õwietla pytanie tak/nie i zwraca odpowied≈∫ u≈ºytkownika"""
        return Confirm.ask(message) 

    def show_file_options(self):
        self.console.print(Panel("""
[cyan]Dostƒôpne opcje:[/cyan]
w - wy≈õlij plik
p - przerwij wysy≈Çanie
s - wy≈õlij wszystkie pozosta≈Çe
n - pomi≈Ñ ten plik
        """.strip())) 